<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>UPLB Eliens</title><link href="https://uplb-eliens.github.io/" rel="alternate"></link><link href="https://uplb-eliens.github.io/feeds/all.atom.xml" rel="self"></link><id>https://uplb-eliens.github.io/</id><updated>2022-08-29T00:00:00+08:00</updated><subtitle>Competitive Programming Team</subtitle><entry><title>What is Competitive Programming?</title><link href="https://uplb-eliens.github.io/what-is-competitive-programming.html" rel="alternate"></link><published>2022-08-29T00:00:00+08:00</published><updated>2022-08-28T00:00:00+08:00</updated><author><name>katipuzer0</name></author><id>tag:uplb-eliens.github.io,2022-08-29:/what-is-competitive-programming.html</id><summary type="html">&lt;p&gt;&lt;em&gt;Introduction&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;In Competitive Programming, competitors are given a set of programming problems to solve within a given period. The competitor who solved the most problems or has accumulated the highest score is declared the winner. Competitors need to train and practice to win, just like in sports or games. The â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;em&gt;Introduction&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;In Competitive Programming, competitors are given a set of programming problems to solve within a given period. The competitor who solved the most problems or has accumulated the highest score is declared the winner. Competitors need to train and practice to win, just like in sports or games. The types of programming problems usually involve data structures and algorithms as well as math concepts.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;How to start?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;First, learn the basics of programming and the features of the programming language you want to use. After taking CMSC 12, CMSC 21, and CMSC 22, you should understand variables, data types, recursion, operators, I/O facilities, control flow structures, arrays, and strings, etc. of Python3, C, and Java. You should be able to translate basic algorithms, such as searching and sorting, into working and correct code. A little bit of OOP knowledge, specifically Generics, is important when using libraries and API.&lt;/p&gt;
&lt;p&gt;Second, learn some Discrete Mathematics. You can get this from CMSC 56 and CMSC 57. These courses do not require coding and mostly use pen and paper. However, I recommend you attempt to implement the algorithms studied in these courses. Understand set theory, probability, counting techniques, methods of proof, trees, graphs, and some automata.&lt;/p&gt;
&lt;p&gt;Third, learn some Data Structures and Algorithm Analysis. You can get this from CMSC 123. Master &lt;em&gt;implementing&lt;/em&gt; linked lists, stacks, queues, hash tables, trees, graphs, etc. Master &lt;em&gt;analyzing the efficiency of algorithms&lt;/em&gt;. Knowing this is important because some problems will require solutions that have bounds in terms of time and memory. Using more efficient data structures and algorithms might be needed.&lt;/p&gt;
&lt;p&gt;Lastly, practice solving problems on online platforms. I recommend &lt;a class="reference external" href="https://open.kattis.com/universities/uplb.edu.ph"&gt;Kattis&lt;/a&gt; for beginners. Try to stay on the #1 spot (It seems like I need to &lt;a class="reference external" href="https://open.kattis.com/users/sir-jach"&gt;catch up&lt;/a&gt; haha). You can actually do this after taking CMSC 57 and CMSC 22 if you are serious on becoming a competitive programmer. There are simple problems that do not require data structures at all. Note also that most problem statements have some background &amp;quot;story.&amp;quot; &lt;em&gt;An excellent skill to develop is how to extract the &amp;quot;core&amp;quot; problem hidden in the story&lt;/em&gt;. Always solve first with pen and paper before writing code. Also, make sure to consider &amp;quot;edge cases&amp;quot; in your solutions.&lt;/p&gt;
&lt;p&gt;Problems in competitive programming are more difficult to solve than the lab exercises for the courses mentioned above. You might be overwhelmed while starting, but &lt;em&gt;don't give up&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Code Quality&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Sadly, code for competitive programming does not need to be readable and maintainable in the traditional sense of software engineering. Your program reads an input file(or from stdin) and then writes to an output file(or to stdout). The code with the minimum lines of code that solves a problem correctly is ideal. Forget using human-readable variable names. Use the C preprocessor to create shorthands for loops etc. Sometimes you don't need to implement data structures from scratch. Use the built-in libraries in the language, such as STL in C++ and the Java API. I highly recommend learning C++ for competitive programming.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;What's in it for you?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;It can improve your problem-solving and programming skills, which &lt;em&gt;might&lt;/em&gt; be helpful in technical interviews when applying for a job. For a competitive person like me who loves CS and coding, it's just for fun and some bragging rights.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Final Notes&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;After completing CMSC 123 and practicing regularly (1 to 2 hours a day), you can make progress on your own. Study more advanced algorithm design techniques and solve more complex problems. Test your skills in actual competitions.&lt;/p&gt;
&lt;p&gt;For more information, check this &lt;a class="reference external" href="https://github.com/uplb-eliens/awesome-competitive-programming"&gt;repo&lt;/a&gt;.&lt;/p&gt;
</content><category term="Tutorials and Guides"></category></entry><entry><title>Welcome!</title><link href="https://uplb-eliens.github.io/welcome.html" rel="alternate"></link><published>2022-08-28T00:00:00+08:00</published><updated>2022-08-28T00:00:00+08:00</updated><author><name>katipuzer0</name></author><id>tag:uplb-eliens.github.io,2022-08-28:/welcome.html</id><content type="html">&lt;p&gt;We will be holding a recruitment contest soon..&lt;/p&gt;
</content><category term="News and Announcements"></category></entry></feed>